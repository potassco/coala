
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '174AF252BAF45D22723AFDEE680F374C'
    
_lr_action_items = {'RBRAC':([7,9,10,18,23,25,33,39,45,90,91,107,109,124,125,128,131,132,139,140,141,152,166,186,195,196,],[-78,-80,-103,-101,-81,-98,-95,-77,-76,-75,139,-96,-97,-72,166,-102,-100,-99,-104,-81,-74,180,-79,-73,197,198,]),'DEFAULT':([0,1,8,46,52,96,146,147,177,],[-1,4,-3,-5,-2,4,-7,-4,-6,]),'FLU':([0,1,8,46,52,71,96,146,147,157,177,],[-1,38,-3,-5,-2,112,38,-7,-4,112,-6,]),'NUMBER':([0,1,2,4,8,19,21,24,34,41,46,52,58,59,60,61,62,63,64,65,66,67,71,73,74,75,77,78,79,81,82,84,85,96,100,101,102,103,116,120,127,135,138,143,146,147,157,163,165,171,175,177,189,192,194,],[-1,7,7,7,-3,7,7,7,7,7,-5,-2,-92,-88,-94,-91,-93,7,7,-89,7,-90,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-7,-4,7,7,7,7,7,-6,7,7,7,]),'ESCAPE_ASP':([0,1,8,46,52,96,146,147,177,],[-1,8,-3,-5,-2,146,-7,-4,-6,]),'IFCONS':([7,9,10,14,18,22,23,25,29,30,33,36,39,40,45,53,54,57,68,69,76,80,86,87,90,107,108,109,117,119,123,126,128,129,131,132,134,139,140,141,153,166,168,180,],[-78,-80,-103,-61,-101,74,-81,-98,-59,-84,-95,-63,-77,-64,-76,-81,-70,-69,-85,-77,120,-46,120,-67,-75,-96,-87,-97,-48,-60,120,120,-102,-86,-100,-99,-62,-104,-81,-74,-68,-79,-47,-71,]),'DDOT':([7,9,23,39,45,166,173,],[-78,-80,-81,-77,-76,-79,189,]),'IF':([7,9,10,14,18,22,23,25,29,30,33,36,39,40,45,51,53,54,55,57,68,69,80,83,87,90,104,107,108,109,119,122,128,129,131,132,134,139,140,141,153,154,166,180,181,],[-78,-80,-103,-61,-101,78,-81,-98,-59,-84,-95,-63,-77,-64,-76,101,-81,-70,-67,-69,-85,-77,127,127,-67,-75,-65,-96,-87,-97,-60,163,-102,-86,-100,-99,-62,-104,-81,-74,-68,-67,-79,-71,-66,]),'ACT':([0,1,8,46,52,71,96,146,147,157,177,],[-1,12,-3,-5,-2,111,12,-7,-4,111,-6,]),'DIV':([7,9,10,18,23,25,30,33,39,45,69,90,107,109,128,131,132,139,140,141,166,],[-78,-80,-103,-101,-81,-98,-75,84,-77,-76,-74,-75,84,84,-102,-100,-99,-104,-81,-74,-79,]),'TRUE':([0,1,2,4,8,21,24,34,46,52,73,74,75,77,78,96,100,101,120,127,146,147,163,177,],[-1,36,36,36,-3,36,36,36,-5,-2,36,36,36,36,36,36,36,36,36,36,-7,-4,36,-6,]),'MINUS':([0,1,2,4,7,8,9,10,15,18,21,23,24,25,30,33,34,39,41,45,46,52,58,59,60,61,62,63,64,65,66,67,69,71,73,74,75,77,78,81,82,84,85,90,91,96,100,101,107,108,109,116,120,127,128,129,131,132,139,140,141,146,147,157,163,166,177,],[-1,19,19,19,-78,-3,-80,-103,66,-101,19,-81,19,-98,-75,-95,19,-77,92,-76,-5,-2,-92,-88,-94,-91,-93,92,92,-89,92,-90,-74,19,19,19,19,19,19,92,92,92,92,-75,66,19,19,19,-96,66,-97,19,19,19,-102,66,-100,-99,-104,-81,-74,-7,-4,19,19,-79,-6,]),'DOT':([3,5,6,7,9,10,11,13,14,16,17,18,20,22,23,25,26,27,28,29,30,31,33,35,36,39,40,43,45,48,49,50,51,53,54,55,56,57,68,69,70,72,76,80,83,86,87,88,89,90,93,94,95,97,98,99,104,105,107,108,109,110,113,114,115,117,118,119,121,122,123,126,128,129,130,131,132,133,134,136,137,139,140,141,142,144,145,148,149,150,151,153,154,155,156,158,159,160,161,162,164,166,167,168,169,170,172,174,176,178,179,180,181,182,183,184,185,187,191,193,197,198,199,200,],[-18,-12,-13,-78,-80,-103,52,-10,-61,-9,-16,-101,-17,-51,-81,-98,-19,-20,-23,-59,-84,-14,-95,-11,-63,-77,-64,-22,-76,-8,-15,-51,-51,-81,-70,-67,-51,-69,-85,-77,-51,-24,-49,-46,-46,-49,-67,-67,-51,-75,-51,-67,-51,-51,-45,-39,-65,-25,-96,-87,-97,-44,-52,-58,-53,-48,-51,-60,-51,-51,-49,-49,-102,-86,-51,-100,-99,-51,-62,-51,-26,-104,-81,-74,-32,-51,-27,177,-38,-51,-51,-68,-67,-55,-67,-57,-34,-50,-35,-36,-51,-79,-51,-47,-21,-42,-28,-83,-29,-41,-40,-71,-66,-56,-54,-51,-33,-43,-37,-82,-51,-51,-30,-31,]),'NEQ':([7,9,10,15,18,23,25,30,33,39,45,69,90,107,109,128,131,132,139,140,141,166,],[-78,-80,-103,67,-101,-81,-98,-75,-95,-77,-76,-74,-75,-96,-97,-102,-100,-99,-104,-81,-74,-79,]),'LE':([7,9,10,15,18,23,25,30,33,39,45,69,90,107,109,128,131,132,139,140,141,166,],[-78,-80,-103,62,-101,-81,-98,-75,-95,-77,-76,-74,-75,-96,-97,-102,-100,-99,-104,-81,-74,-79,]),'POWER':([7,9,10,18,23,25,30,39,45,69,90,128,131,132,139,140,141,166,],[-78,-80,-103,-101,-81,81,-75,-77,-76,-74,-75,-102,81,81,-104,-81,-74,-79,]),'DFLU':([0,1,8,46,52,96,146,147,177,],[-1,44,-3,-5,-2,44,-7,-4,-6,]),'EQ':([7,9,10,15,18,23,25,30,33,39,45,53,54,55,57,69,87,88,90,94,107,109,128,131,132,139,140,141,154,156,166,180,],[-78,-80,-103,65,-101,-81,-98,-75,-95,-77,-76,-81,-70,103,-69,-74,103,135,-75,143,-96,-97,-102,-100,-99,-104,-81,-74,103,103,-79,-71,]),'LT':([7,9,10,15,18,23,25,30,33,39,45,69,90,107,109,128,131,132,139,140,141,166,],[-78,-80,-103,61,-101,-81,-98,-75,-95,-77,-76,-74,-75,-96,-97,-102,-100,-99,-104,-81,-74,-79,]),'VISIBLE':([0,1,8,46,52,96,146,147,177,],[-1,32,-3,-5,-2,32,-7,-4,-6,]),'INIT':([0,1,8,46,52,96,146,147,177,],[-1,21,-3,-5,-2,21,-7,-4,-6,]),'PLUS':([7,9,10,15,18,23,25,30,33,39,45,69,90,91,107,108,109,128,129,131,132,139,140,141,166,],[-78,-80,-103,63,-101,-81,-98,-75,-95,-77,-76,-74,-75,63,-96,63,-97,-102,63,-100,-99,-104,-81,-74,-79,]),'CAUSES':([7,9,10,14,18,22,23,25,29,30,33,36,39,40,45,53,54,57,68,69,87,90,107,108,109,119,128,129,131,132,134,139,140,141,153,166,180,],[-78,-80,-103,-61,-101,77,-81,-98,-59,-84,-95,-63,-77,-64,-76,-81,-70,-69,-85,-77,-67,-75,-96,-87,-97,-60,-102,-86,-100,-99,-62,-104,-81,-74,-68,-79,-71,]),'COLON':([7,9,23,39,45,53,54,57,88,89,94,95,104,153,154,166,180,181,],[-78,-80,-81,-77,-76,-81,-70,-69,-67,138,-67,138,-65,-68,-67,-79,-71,-66,]),'IDENTIFIER':([0,1,2,4,8,12,19,21,24,32,34,37,38,41,42,44,46,47,52,58,59,60,61,62,63,64,65,66,67,71,73,74,75,77,78,79,81,82,84,85,92,96,100,101,102,103,106,111,112,116,120,127,135,138,143,146,147,157,163,165,171,175,177,189,192,194,],[-1,23,23,23,-3,53,23,23,23,53,23,53,53,23,53,53,-5,53,-2,-92,-88,-94,-91,-93,23,23,-89,23,-90,23,23,23,23,23,23,23,23,23,23,23,140,23,23,23,23,23,53,53,53,23,23,23,23,23,23,-7,-4,23,23,23,23,23,-6,23,23,23,]),'NONEXE':([0,1,8,46,52,96,146,147,177,],[-1,24,-3,-5,-2,24,-7,-4,-6,]),'$end':([0,1,8,52,147,],[-1,0,-3,-2,-4,]),'GT':([7,9,10,15,18,23,25,30,33,39,45,69,90,107,109,128,131,132,139,140,141,166,],[-78,-80,-103,58,-101,-81,-98,-75,-95,-77,-76,-74,-75,-96,-97,-102,-100,-99,-104,-81,-74,-79,]),'EQQ':([7,9,10,15,18,23,25,30,33,39,45,69,90,107,109,128,131,132,139,140,141,166,],[-78,-80,-103,59,-101,-81,-98,-75,-95,-77,-76,-74,-75,-96,-97,-102,-100,-99,-104,-81,-74,-79,]),'TIMES':([7,9,10,18,23,25,30,33,39,45,69,90,107,109,128,131,132,139,140,141,166,],[-78,-80,-103,-101,-81,-98,-75,85,-77,-76,-74,-75,85,85,-102,-100,-99,-104,-81,-74,-79,]),'ROLE_BEGIN':([0,1,8,52,147,],[-1,46,-3,-2,-4,]),'GE':([7,9,10,15,18,23,25,30,33,39,45,69,90,107,109,128,131,132,139,140,141,166,],[-78,-80,-103,60,-101,-81,-98,-75,-95,-77,-76,-74,-75,-96,-97,-102,-100,-99,-104,-81,-74,-79,]),'VARIABLE':([0,1,2,4,8,12,19,21,24,32,34,37,38,41,42,44,46,47,52,58,59,60,61,62,63,64,65,66,67,71,73,74,75,77,78,79,81,82,84,85,96,100,101,102,103,106,111,112,116,120,127,135,138,143,146,147,157,163,165,171,175,177,189,192,194,],[-1,9,9,9,-3,9,9,9,9,9,9,9,9,9,9,9,-5,9,-2,-92,-88,-94,-91,-93,9,9,-89,9,-90,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-7,-4,9,9,9,9,9,-6,9,9,9,]),'IMPOSSIBLE':([0,1,8,46,52,96,146,147,177,],[-1,34,-3,-5,-2,34,-7,-4,-6,]),'WHERE':([7,9,10,14,18,22,23,25,29,30,33,36,39,40,45,50,51,53,54,55,56,57,68,69,70,76,80,83,86,87,88,89,90,93,94,95,97,104,107,108,109,117,118,119,121,122,123,126,128,129,130,131,132,133,134,136,139,140,141,144,150,151,153,154,160,164,166,167,168,174,180,181,184,193,197,198,],[-78,-80,-103,-61,-101,71,-81,-98,-59,-84,-95,-63,-77,-64,-76,71,71,-81,-70,-67,71,-69,-85,-77,71,-49,-46,-46,-49,-67,-67,71,-75,71,-67,71,71,-65,-96,-87,-97,-48,71,-60,71,71,-49,-49,-102,-86,71,-100,-99,71,-62,71,-104,-81,-74,71,71,71,-68,-67,-50,71,-79,71,-47,-83,-71,-66,71,-82,71,71,]),'GOAL':([0,1,8,46,52,96,146,147,177,],[-1,2,-3,-5,-2,2,-7,-4,-6,]),'FALSE':([0,1,2,4,8,21,24,34,46,52,73,74,75,77,78,96,100,101,120,127,146,147,163,177,],[-1,40,40,40,-3,40,40,40,-5,-2,40,40,40,40,40,40,40,40,40,40,-7,-4,40,-6,]),'LBRAC':([0,1,2,4,8,21,23,24,34,41,46,52,53,58,59,60,61,62,63,64,65,66,67,71,73,74,75,77,78,81,82,84,85,96,100,101,116,120,127,135,143,146,147,157,163,177,],[-1,41,41,41,-3,41,79,41,41,41,-5,-2,102,-92,-88,-94,-91,-93,41,41,-89,41,-90,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,171,175,-7,-4,41,41,-6,]),'INT':([0,1,8,46,52,96,138,146,147,177,],[-1,42,-3,-5,-2,42,174,-7,-4,-6,]),'INERTIAL':([0,1,8,46,52,96,146,147,177,],[-1,47,-3,-5,-2,47,-7,-4,-6,]),'AFTER':([7,9,10,14,18,22,23,25,29,30,33,36,39,40,45,51,53,54,57,68,69,87,90,107,108,109,119,128,129,131,132,134,139,140,141,153,166,180,],[-78,-80,-103,-61,-101,73,-81,-98,-59,-84,-95,-63,-77,-64,-76,100,-81,-70,-69,-85,-77,-67,-75,-96,-87,-97,-60,-102,-86,-100,-99,-62,-104,-81,-74,-68,-79,-71,]),'ROLE_END':([46,96,146,177,],[-5,147,-7,-6,]),'ASSIGN':([7,9,23,30,39,45,166,],[-78,-80,-81,82,-77,-76,-79,]),'NOT':([0,1,2,4,8,21,24,34,46,52,71,73,74,75,77,78,96,100,101,120,127,146,147,157,163,177,],[-1,37,37,37,-3,37,37,37,-5,-2,116,37,37,37,37,37,37,37,37,37,37,-7,-4,116,37,-6,]),'COMMA':([7,9,10,14,18,22,23,25,29,30,33,36,39,40,45,50,51,53,54,55,56,57,68,69,70,80,83,86,87,88,89,90,93,94,95,97,104,107,108,109,113,114,115,117,118,119,122,123,124,128,129,131,132,134,139,140,141,150,151,153,154,155,156,158,160,166,168,180,181,182,183,184,188,190,],[-78,-80,-103,-61,-101,75,-81,-98,-59,-84,-95,-63,-77,-64,-76,75,75,-81,-70,-67,106,-69,-85,-77,75,75,106,75,-67,-67,106,-75,106,-67,106,106,-65,-96,-87,-97,157,-58,-53,75,75,-60,75,75,165,-102,-86,-100,-99,-62,-104,-81,-74,75,75,-68,-67,-55,-67,-57,75,-79,75,-71,-66,-56,-54,75,192,194,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'asp_brac_operation':([1,2,4,21,24,34,41,63,64,66,71,73,74,75,77,78,81,82,84,85,96,100,101,116,120,127,157,163,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,128,18,18,18,18,18,18,18,18,18,18,18,]),'imposs_law':([1,96,],[3,3,]),'act_fact':([1,96,],[5,5,]),'flu_fact':([1,96,],[6,6,]),'fluent_formula':([12,32,38,42,44,47,],[56,83,89,93,95,97,]),'dynamic_law':([1,96,],[49,49,]),'asp_eqoperator':([15,],[64,]),'asp_pow_operation':([1,2,4,21,24,34,41,63,64,66,71,73,74,75,77,78,82,84,85,96,100,101,116,120,127,157,163,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,131,132,25,25,25,25,25,25,25,25,]),'query':([1,96,],[13,13,]),'binding':([71,157,],[115,183,]),'after_part':([22,],[76,]),'asp_term':([1,2,4,21,24,34,71,73,74,75,77,78,96,100,101,116,120,127,157,163,],[14,14,14,14,14,14,114,14,14,14,14,14,14,14,14,158,14,14,114,14,]),'law':([1,96,],[16,16,]),'asp_operation':([1,2,4,21,24,34,41,64,71,73,74,75,77,78,82,96,100,101,116,120,127,157,163,],[15,15,15,15,15,15,91,108,15,15,15,15,15,15,129,15,15,15,15,15,15,15,15,]),'term_or_negated_ident':([1,2,4,21,24,34,41,63,64,66,71,73,74,75,77,78,81,82,84,85,96,100,101,116,120,127,157,163,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'default_law':([1,96,],[20,20,]),'program':([0,],[1,]),'role':([46,],[96,]),'formula':([1,2,4,21,24,34,73,74,77,78,96,100,101,120,127,163,],[22,50,51,70,80,86,117,118,122,123,22,150,151,160,168,184,]),'int_domain':([89,95,],[136,144,]),'nonexe_law':([1,96,],[26,26,]),'visible_law':([1,96,],[27,27,]),'goal_query':([1,96,],[28,28,]),'tfa':([1,2,4,21,24,34,73,74,75,77,78,96,100,101,120,127,163,],[29,29,29,29,29,29,29,29,119,29,29,29,29,29,29,29,29,]),'static_law':([1,96,],[31,31,]),'asp_mult_operation':([1,2,4,21,24,34,41,63,64,66,71,73,74,75,77,78,82,96,100,101,116,120,127,157,163,],[33,33,33,33,33,33,33,107,33,109,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'if_part':([80,83,],[126,130,]),'bindings':([71,],[113,]),'pred_fact':([1,96,],[35,35,]),'term_list':([79,102,165,192,194,],[125,152,186,195,196,]),'term':([1,2,4,19,21,24,34,41,63,64,66,71,73,74,75,77,78,79,81,82,84,85,96,100,101,102,103,116,120,127,135,138,143,157,163,165,171,175,189,192,194,],[30,30,30,68,30,30,30,90,90,90,90,30,30,30,30,30,30,124,90,90,90,90,30,30,30,124,153,30,30,30,153,173,153,30,30,124,188,190,193,124,124,]),'var_term':([1,2,4,12,19,21,24,32,34,37,38,41,42,44,47,63,64,66,71,73,74,75,77,78,79,81,82,84,85,96,100,101,102,103,106,111,112,116,120,127,135,138,143,157,163,165,171,175,189,192,194,],[45,45,45,54,45,45,45,54,45,54,54,45,54,54,54,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,54,54,54,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'where_part':([22,50,51,56,70,89,93,95,97,118,121,122,130,133,136,144,150,151,164,167,184,197,198,],[72,98,99,105,110,137,142,145,149,159,161,162,169,170,172,176,178,179,185,187,191,199,200,]),'init_rule':([1,96,],[43,43,]),'inertial_law':([1,96,],[17,17,]),'rule':([1,96,],[11,148,]),'fluent':([12,32,37,38,42,44,47,106,111,112,],[55,55,87,88,55,94,55,154,155,156,]),'equalpart':([55,87,88,94,154,156,],[104,134,104,104,181,182,]),'identifier':([1,2,4,12,19,21,24,32,34,37,38,41,42,44,47,63,64,66,71,73,74,75,77,78,79,81,82,84,85,92,96,100,101,102,103,106,111,112,116,120,127,135,138,143,157,163,165,171,175,189,192,194,],[39,39,39,57,69,39,39,57,39,57,57,39,57,57,57,39,39,39,39,39,39,39,39,39,39,39,39,39,39,141,39,39,39,39,39,57,57,57,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'fact':([1,96,],[48,48,]),'ifcons_part':([76,86,123,126,],[121,133,164,167,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> <empty>','program',0,'p_program','parser.py',51),
  ('program -> program rule DOT','program',3,'p_program','parser.py',52),
  ('program -> program ESCAPE_ASP','program',2,'p_program','parser.py',53),
  ('program -> program ROLE_BEGIN role ROLE_END','program',4,'p_program','parser.py',54),
  ('role -> <empty>','role',0,'p_role','parser.py',79),
  ('role -> role rule DOT','role',3,'p_role','parser.py',80),
  ('role -> role ESCAPE_ASP','role',2,'p_role','parser.py',81),
  ('rule -> fact','rule',1,'p_rule','parser.py',108),
  ('rule -> law','rule',1,'p_rule','parser.py',109),
  ('rule -> query','rule',1,'p_rule','parser.py',110),
  ('fact -> pred_fact','fact',1,'p_fact','parser.py',114),
  ('fact -> act_fact','fact',1,'p_fact','parser.py',115),
  ('fact -> flu_fact','fact',1,'p_fact','parser.py',116),
  ('law -> static_law','law',1,'p_law','parser.py',121),
  ('law -> dynamic_law','law',1,'p_law','parser.py',122),
  ('law -> inertial_law','law',1,'p_law','parser.py',123),
  ('law -> default_law','law',1,'p_law','parser.py',124),
  ('law -> imposs_law','law',1,'p_law','parser.py',125),
  ('law -> nonexe_law','law',1,'p_law','parser.py',126),
  ('law -> visible_law','law',1,'p_law','parser.py',127),
  ('visible_law -> VISIBLE fluent_formula if_part where_part','visible_law',4,'p_visible_law','parser.py',131),
  ('query -> init_rule','query',1,'p_query','parser.py',139),
  ('query -> goal_query','query',1,'p_query','parser.py',140),
  ('pred_fact -> formula where_part','pred_fact',2,'p_pred_fact','parser.py',144),
  ('act_fact -> ACT fluent_formula where_part','act_fact',3,'p_act_fact','parser.py',149),
  ('flu_fact -> FLU fluent_formula where_part','flu_fact',3,'p_flu_fact','parser.py',159),
  ('flu_fact -> DFLU fluent_formula where_part','flu_fact',3,'p_flu_fact','parser.py',160),
  ('flu_fact -> FLU fluent_formula int_domain where_part','flu_fact',4,'p_flu_fact','parser.py',161),
  ('flu_fact -> DFLU fluent_formula int_domain where_part','flu_fact',4,'p_flu_fact','parser.py',162),
  ('flu_fact -> FLU fluent EQ LBRAC term COMMA term_list RBRAC where_part','flu_fact',9,'p_flu_fact','parser.py',163),
  ('flu_fact -> DFLU fluent EQ LBRAC term COMMA term_list RBRAC where_part','flu_fact',9,'p_flu_fact','parser.py',164),
  ('flu_fact -> INT fluent_formula where_part','flu_fact',3,'p_flu_fact','parser.py',165),
  ('static_law -> formula IF formula ifcons_part where_part','static_law',5,'p_static_law','parser.py',190),
  ('static_law -> formula IFCONS formula where_part','static_law',4,'p_static_law','parser.py',191),
  ('dynamic_law -> formula after_part ifcons_part where_part','dynamic_law',4,'p_dynamic_law','parser.py',203),
  ('dynamic_law -> formula CAUSES formula where_part','dynamic_law',4,'p_dynamic_law','parser.py',204),
  ('dynamic_law -> formula CAUSES formula IF formula where_part','dynamic_law',6,'p_dynamic_law','parser.py',205),
  ('inertial_law -> INERTIAL fluent_formula where_part','inertial_law',3,'p_inertial_law','parser.py',224),
  ('default_law -> DEFAULT formula where_part','default_law',3,'p_default_law','parser.py',229),
  ('default_law -> DEFAULT formula IF formula where_part','default_law',5,'p_default_law','parser.py',230),
  ('default_law -> DEFAULT formula AFTER formula where_part','default_law',5,'p_default_law','parser.py',231),
  ('imposs_law -> IMPOSSIBLE formula ifcons_part where_part','imposs_law',4,'p_imposs_law','parser.py',242),
  ('nonexe_law -> NONEXE formula if_part ifcons_part where_part','nonexe_law',5,'p_nonexe_law','parser.py',256),
  ('init_rule -> INIT formula where_part','init_rule',3,'p_init_rule','parser.py',272),
  ('goal_query -> GOAL formula where_part','goal_query',3,'p_goal_query','parser.py',278),
  ('if_part -> <empty>','if_part',0,'p_if_part','parser.py',286),
  ('if_part -> IF formula','if_part',2,'p_if_part','parser.py',287),
  ('after_part -> AFTER formula','after_part',2,'p_after_part','parser.py',295),
  ('ifcons_part -> <empty>','ifcons_part',0,'p_ifcons_part','parser.py',301),
  ('ifcons_part -> IFCONS formula','ifcons_part',2,'p_ifcons_part','parser.py',302),
  ('where_part -> <empty>','where_part',0,'p_where_part','parser.py',310),
  ('where_part -> WHERE bindings','where_part',2,'p_where_part','parser.py',311),
  ('bindings -> binding','bindings',1,'p_bindings','parser.py',316),
  ('bindings -> bindings COMMA binding','bindings',3,'p_bindings','parser.py',317),
  ('binding -> ACT fluent','binding',2,'p_binding','parser.py',325),
  ('binding -> FLU fluent equalpart','binding',3,'p_binding','parser.py',326),
  ('binding -> NOT asp_term','binding',2,'p_binding','parser.py',327),
  ('binding -> asp_term','binding',1,'p_binding','parser.py',328),
  ('formula -> tfa','formula',1,'p_formula','parser.py',343),
  ('formula -> formula COMMA tfa','formula',3,'p_formula','parser.py',344),
  ('tfa -> asp_term','tfa',1,'p_tfa','parser.py',355),
  ('tfa -> NOT fluent equalpart','tfa',3,'p_tfa','parser.py',356),
  ('tfa -> TRUE','tfa',1,'p_tfa','parser.py',357),
  ('tfa -> FALSE','tfa',1,'p_tfa','parser.py',358),
  ('fluent_formula -> fluent equalpart','fluent_formula',2,'p_fluent_formula','parser.py',389),
  ('fluent_formula -> fluent_formula COMMA fluent equalpart','fluent_formula',4,'p_fluent_formula','parser.py',390),
  ('equalpart -> <empty>','equalpart',0,'p_equalpart','parser.py',405),
  ('equalpart -> EQ term','equalpart',2,'p_equalpart','parser.py',406),
  ('fluent -> identifier','fluent',1,'p_fluent','parser.py',413),
  ('fluent -> var_term','fluent',1,'p_fluent','parser.py',414),
  ('fluent -> IDENTIFIER LBRAC term_list RBRAC','fluent',4,'p_fluent','parser.py',415),
  ('term_list -> term','term_list',1,'p_term_list','parser.py',422),
  ('term_list -> term COMMA term_list','term_list',3,'p_term_list','parser.py',423),
  ('term_or_negated_ident -> MINUS identifier','term_or_negated_ident',2,'p_term_or_negated_ident','parser.py',431),
  ('term_or_negated_ident -> term','term_or_negated_ident',1,'p_term_or_negated_ident','parser.py',432),
  ('term -> var_term','term',1,'p_term','parser.py',439),
  ('term -> identifier','term',1,'p_term','parser.py',440),
  ('term -> NUMBER','term',1,'p_term','parser.py',441),
  ('term -> IDENTIFIER LBRAC term_list RBRAC','term',4,'p_term','parser.py',442),
  ('var_term -> VARIABLE','var_term',1,'p_var_term','parser.py',452),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','parser.py',456),
  ('int_domain -> COLON term DDOT term','int_domain',4,'p_int_domain','parser.py',460),
  ('int_domain -> COLON INT','int_domain',2,'p_int_domain','parser.py',461),
  ('asp_term -> term','asp_term',1,'p_asp_term','parser.py',485),
  ('asp_term -> MINUS term','asp_term',2,'p_asp_term','parser.py',486),
  ('asp_term -> term ASSIGN asp_operation','asp_term',3,'p_asp_term','parser.py',487),
  ('asp_term -> asp_operation asp_eqoperator asp_operation','asp_term',3,'p_asp_term','parser.py',488),
  ('asp_eqoperator -> EQQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',501),
  ('asp_eqoperator -> EQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',502),
  ('asp_eqoperator -> NEQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',503),
  ('asp_eqoperator -> LT','asp_eqoperator',1,'p_asp_eqoperator','parser.py',504),
  ('asp_eqoperator -> GT','asp_eqoperator',1,'p_asp_eqoperator','parser.py',505),
  ('asp_eqoperator -> LE','asp_eqoperator',1,'p_asp_eqoperator','parser.py',506),
  ('asp_eqoperator -> GE','asp_eqoperator',1,'p_asp_eqoperator','parser.py',507),
  ('asp_operation -> asp_mult_operation','asp_operation',1,'p_asp_operation','parser.py',511),
  ('asp_operation -> asp_operation PLUS asp_mult_operation','asp_operation',3,'p_asp_operation','parser.py',512),
  ('asp_operation -> asp_operation MINUS asp_mult_operation','asp_operation',3,'p_asp_operation','parser.py',513),
  ('asp_mult_operation -> asp_pow_operation','asp_mult_operation',1,'p_asp_mult_operation','parser.py',520),
  ('asp_mult_operation -> asp_mult_operation TIMES asp_pow_operation','asp_mult_operation',3,'p_asp_mult_operation','parser.py',521),
  ('asp_mult_operation -> asp_mult_operation DIV asp_pow_operation','asp_mult_operation',3,'p_asp_mult_operation','parser.py',522),
  ('asp_pow_operation -> asp_brac_operation','asp_pow_operation',1,'p_asp_pow_operation','parser.py',529),
  ('asp_pow_operation -> asp_pow_operation POWER asp_brac_operation','asp_pow_operation',3,'p_asp_pow_operation','parser.py',530),
  ('asp_brac_operation -> term_or_negated_ident','asp_brac_operation',1,'p_asp_brac_operation','parser.py',537),
  ('asp_brac_operation -> LBRAC asp_operation RBRAC','asp_brac_operation',3,'p_asp_brac_operation','parser.py',538),
]
