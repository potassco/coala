
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '975E548E7E2B5B45F9050228792779BD'
    
_lr_action_items = {'RBRAC':([6,62,67,70,74,75,109,117,119,120,],[-59,-56,-55,-54,-52,108,-57,120,-53,-58,]),'FLU':([0,1,5,41,49,87,],[-1,19,-2,61,-3,61,]),'NUMBER':([41,44,50,64,71,76,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,],[62,62,62,88,62,109,62,-68,-64,62,-70,-73,-67,-69,-71,62,-74,-65,-72,-66,62,62,]),'ESCAPE_ASP':([0,1,5,49,],[-1,5,-2,-3,]),'ACT':([0,1,5,41,49,87,],[-1,8,-2,60,-3,60,]),'DIV':([6,62,65,67,69,70,88,109,115,116,120,],[-59,-56,99,-55,-62,-54,-56,-57,-63,99,-58,]),'TRUE':([0,1,5,14,17,24,27,40,42,43,49,78,],[-1,10,-2,10,10,10,10,10,10,10,-3,10,]),'MINUS':([0,1,5,6,14,17,24,27,40,41,42,43,44,49,50,62,64,65,67,69,70,71,78,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,109,115,116,120,],[-1,11,-2,-59,11,11,11,11,11,64,11,11,76,-3,76,-56,76,101,-55,-62,-54,76,11,64,-56,-68,-64,76,-70,-73,-67,-69,-71,76,-74,-65,-72,-66,76,76,-57,-63,101,-58,]),'DOT':([2,3,4,6,7,9,10,12,15,16,18,20,21,22,23,25,26,28,29,30,31,33,34,35,36,37,38,39,45,46,47,48,51,52,53,54,56,57,58,59,62,63,65,66,67,68,69,70,72,73,77,79,80,81,82,83,84,85,86,88,89,104,105,106,108,109,110,111,112,113,114,115,116,118,120,],[-12,-8,-9,-59,-11,-6,-40,-5,-28,-49,-13,-15,-37,-10,-39,-7,-41,-50,-14,49,-47,-4,-47,-28,-47,-28,-28,-16,-26,-28,-28,-28,-42,-47,-45,-17,-44,-19,-24,-38,-56,-29,-60,-34,-55,-30,-62,-54,-26,-28,-28,-18,-22,-25,-48,-43,-47,-32,-47,-56,-36,-35,-28,-20,-51,-57,-23,-27,-46,-33,-31,-63,-61,-21,-58,]),'NEQ':([6,62,65,67,69,70,88,109,115,120,],[-59,-56,102,-55,-62,-54,-56,-57,-63,-58,]),'LE':([6,62,65,67,69,70,88,109,115,120,],[-59,-56,96,-55,-62,-54,-56,-57,-63,-58,]),'DFLU':([0,1,5,49,],[-1,13,-2,-3,]),'WHERE':([6,10,15,16,21,23,26,28,31,34,35,36,37,38,45,46,47,48,51,52,53,56,59,62,67,70,72,73,77,82,83,84,105,108,109,111,112,120,],[-59,-40,41,-49,-37,-39,-41,-50,-47,-47,41,-47,41,41,-26,41,41,41,-42,-47,-45,-44,-38,-56,-55,-54,-26,41,41,-48,-43,-47,41,-51,-57,-27,-46,-58,]),'LT':([6,62,65,67,69,70,88,109,115,120,],[-59,-56,95,-55,-62,-54,-56,-57,-63,-58,]),'INIT':([0,1,5,49,],[-1,14,-2,-3,]),'COMMA':([6,10,15,16,21,23,26,28,31,34,35,36,37,38,45,46,47,48,51,52,53,56,59,62,63,65,66,67,68,69,70,72,73,74,82,83,84,85,86,88,89,104,108,109,111,112,113,114,115,116,120,],[-59,-40,40,-49,-37,-39,-41,-50,-47,-47,55,-47,55,40,40,55,40,40,-42,-47,-45,-44,-38,-56,87,-60,-34,-55,-30,-62,-54,40,40,107,-48,-43,-47,-32,-47,-56,-36,-35,-51,-57,40,-46,-33,-31,-63,-61,-58,]),'CAUSES':([6,10,15,16,21,23,26,28,31,36,51,52,56,59,62,67,70,82,83,108,109,120,],[-59,-40,42,-49,-37,-39,-41,-50,-47,-47,-42,-47,-44,-38,-56,-55,-54,-48,-43,-51,-57,-58,]),'PLUS':([6,62,65,67,69,70,88,109,115,116,120,],[-59,-56,97,-55,-62,-54,-56,-57,-63,97,-58,]),'IDENTIFIER':([0,1,5,8,11,13,14,17,19,24,27,32,40,41,42,43,44,49,50,55,60,61,64,71,78,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,],[-1,16,-2,16,16,16,16,16,16,16,16,16,16,67,16,16,67,-3,67,16,16,16,67,67,16,67,-68,-64,67,-70,-73,-67,-69,-71,67,-74,-65,-72,-66,67,67,]),'NONEXE':([0,1,5,49,],[-1,17,-2,-3,]),'$end':([0,1,5,49,],[-1,0,-2,-3,]),'GT':([6,62,65,67,69,70,88,109,115,120,],[-59,-56,90,-55,-62,-54,-56,-57,-63,-58,]),'EQQ':([6,62,65,67,69,70,88,109,115,120,],[-59,-56,91,-55,-62,-54,-56,-57,-63,-58,]),'TIMES':([6,62,65,67,69,70,88,109,115,116,120,],[-59,-56,94,-55,-62,-54,-56,-57,-63,94,-58,]),'GE':([6,62,65,67,69,70,88,109,115,120,],[-59,-56,93,-55,-62,-54,-56,-57,-63,-58,]),'VARIABLE':([0,1,5,8,11,13,14,17,19,24,27,32,40,41,42,43,44,49,50,55,60,61,64,71,78,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,],[-1,6,-2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-3,6,6,6,6,6,6,6,6,-68,-64,6,-70,-73,-67,-69,-71,6,-74,-65,-72,-66,6,6,]),'IMPOSSIBLE':([0,1,5,49,],[-1,24,-2,-3,]),'EQ':([6,16,28,31,34,36,52,62,65,67,69,70,84,86,88,108,109,115,120,],[-59,-49,-50,50,50,50,50,-56,100,-55,-62,-54,50,50,-56,-51,-57,-63,-58,]),'IF':([6,10,15,16,21,23,26,28,31,36,45,51,52,56,59,62,67,70,72,82,83,108,109,120,],[-59,-40,43,-49,-37,-39,-41,-50,-47,-47,78,-42,-47,-44,-38,-56,-55,-54,78,-48,-43,-51,-57,-58,]),'FALSE':([0,1,5,14,17,24,27,40,42,43,49,78,],[-1,26,-2,26,26,26,26,26,26,26,-3,26,]),'GOAL':([0,1,5,49,],[-1,27,-2,-3,]),'LBRAC':([16,67,],[44,103,]),'NOT':([0,1,5,14,17,24,27,40,41,42,43,49,78,87,],[-1,32,-2,32,32,32,32,32,71,32,32,-3,32,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'imposs_law':([1,],[2,]),'act_fact':([1,],[3,]),'flu_fact':([1,],[4,]),'fluent_formula':([8,13,19,],[35,37,46,]),'dynamic_law':([1,],[7,]),'asp_eqoperator':([65,],[98,]),'query':([1,],[9,]),'bindings':([41,],[63,]),'asp_term':([41,64,71,87,],[66,89,104,66,]),'law':([1,],[12,]),'asp_operation':([41,64,71,87,98,],[65,65,65,65,116,]),'program':([0,],[1,]),'formula':([1,14,17,24,27,42,43,78,],[15,38,45,47,48,72,73,111,]),'nonexe_law':([1,],[18,]),'binding':([41,87,],[68,114,]),'goal_query':([1,],[20,]),'tfa':([1,14,17,24,27,40,42,43,78,],[21,21,21,21,21,59,21,21,21,]),'static_law':([1,],[22,]),'atom':([1,14,17,24,27,40,42,43,78,],[23,23,23,23,23,23,23,23,23,]),'if_part':([45,72,],[77,105,]),'pred_fact':([1,],[25,]),'term_list':([44,103,107,],[75,117,119,]),'term':([41,44,50,64,71,87,92,98,103,107,],[69,74,82,69,69,69,115,69,74,74,]),'var_term':([1,8,11,13,14,17,19,24,27,32,40,41,42,43,44,50,55,60,61,64,71,78,87,92,98,103,107,],[28,28,28,28,28,28,28,28,28,28,28,70,28,28,70,70,28,28,28,70,70,28,70,70,70,70,70,]),'where_part':([15,35,37,38,46,47,48,73,77,105,],[39,54,57,58,79,80,81,106,110,118,]),'init_rule':([1,],[29,]),'asp_operator':([65,116,],[92,92,]),'rule':([1,],[30,]),'fluent':([1,8,11,13,14,17,19,24,27,32,40,42,43,55,60,61,78,],[31,34,36,34,31,31,34,31,31,52,31,31,31,84,85,86,31,]),'equalpart':([31,34,36,52,84,86,],[51,53,56,83,112,113,]),'fact':([1,],[33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> <empty>','program',0,'p_program','parser.py',59),
  ('program -> program ESCAPE_ASP','program',2,'p_program','parser.py',60),
  ('program -> program rule DOT','program',3,'p_program','parser.py',61),
  ('rule -> fact','rule',1,'p_rule','parser.py',66),
  ('rule -> law','rule',1,'p_rule','parser.py',67),
  ('rule -> query','rule',1,'p_rule','parser.py',68),
  ('fact -> pred_fact','fact',1,'p_fact','parser.py',72),
  ('fact -> act_fact','fact',1,'p_fact','parser.py',73),
  ('fact -> flu_fact','fact',1,'p_fact','parser.py',74),
  ('law -> static_law','law',1,'p_law','parser.py',78),
  ('law -> dynamic_law','law',1,'p_law','parser.py',79),
  ('law -> imposs_law','law',1,'p_law','parser.py',80),
  ('law -> nonexe_law','law',1,'p_law','parser.py',81),
  ('query -> init_rule','query',1,'p_query','parser.py',85),
  ('query -> goal_query','query',1,'p_query','parser.py',86),
  ('pred_fact -> formula where_part','pred_fact',2,'p_pred_fact','parser.py',90),
  ('act_fact -> ACT fluent_formula where_part','act_fact',3,'p_act_fact','parser.py',96),
  ('flu_fact -> FLU fluent_formula where_part','flu_fact',3,'p_flu_fact','parser.py',102),
  ('flu_fact -> DFLU fluent_formula where_part','flu_fact',3,'p_flu_fact','parser.py',103),
  ('static_law -> formula IF formula where_part','static_law',4,'p_static_law','parser.py',114),
  ('dynamic_law -> formula CAUSES formula if_part where_part','dynamic_law',5,'p_dynamic_law','parser.py',127),
  ('imposs_law -> IMPOSSIBLE formula where_part','imposs_law',3,'p_imposs_law','parser.py',140),
  ('nonexe_law -> NONEXE formula if_part where_part','nonexe_law',4,'p_nonexe_law','parser.py',150),
  ('init_rule -> INIT formula where_part','init_rule',3,'p_init_rule','parser.py',164),
  ('goal_query -> GOAL formula where_part','goal_query',3,'p_goal_query','parser.py',171),
  ('if_part -> <empty>','if_part',0,'p_if_part','parser.py',180),
  ('if_part -> IF formula','if_part',2,'p_if_part','parser.py',181),
  ('where_part -> <empty>','where_part',0,'p_where_part','parser.py',188),
  ('where_part -> WHERE bindings','where_part',2,'p_where_part','parser.py',189),
  ('bindings -> binding','bindings',1,'p_bindings','parser.py',194),
  ('bindings -> bindings COMMA binding','bindings',3,'p_bindings','parser.py',195),
  ('binding -> ACT fluent','binding',2,'p_binding','parser.py',205),
  ('binding -> FLU fluent equalpart','binding',3,'p_binding','parser.py',206),
  ('binding -> asp_term','binding',1,'p_binding','parser.py',207),
  ('binding -> NOT asp_term','binding',2,'p_binding','parser.py',208),
  ('binding -> MINUS asp_term','binding',2,'p_binding','parser.py',209),
  ('formula -> tfa','formula',1,'p_formula','parser.py',234),
  ('formula -> formula COMMA tfa','formula',3,'p_formula','parser.py',235),
  ('tfa -> atom','tfa',1,'p_tfa','parser.py',244),
  ('tfa -> TRUE','tfa',1,'p_tfa','parser.py',245),
  ('tfa -> FALSE','tfa',1,'p_tfa','parser.py',246),
  ('atom -> fluent equalpart','atom',2,'p_atom','parser.py',254),
  ('atom -> NOT fluent equalpart','atom',3,'p_atom','parser.py',255),
  ('atom -> MINUS fluent equalpart','atom',3,'p_atom','parser.py',256),
  ('fluent_formula -> fluent equalpart','fluent_formula',2,'p_fluent_formula','parser.py',274),
  ('fluent_formula -> fluent_formula COMMA fluent equalpart','fluent_formula',4,'p_fluent_formula','parser.py',275),
  ('equalpart -> <empty>','equalpart',0,'p_equalpart','parser.py',292),
  ('equalpart -> EQ term','equalpart',2,'p_equalpart','parser.py',293),
  ('fluent -> IDENTIFIER','fluent',1,'p_fluent','parser.py',298),
  ('fluent -> var_term','fluent',1,'p_fluent','parser.py',299),
  ('fluent -> IDENTIFIER LBRAC term_list RBRAC','fluent',4,'p_fluent','parser.py',300),
  ('term_list -> term','term_list',1,'p_term_list','parser.py',309),
  ('term_list -> term COMMA term_list','term_list',3,'p_term_list','parser.py',310),
  ('term -> var_term','term',1,'p_term','parser.py',320),
  ('term -> IDENTIFIER','term',1,'p_term','parser.py',321),
  ('term -> NUMBER','term',1,'p_term','parser.py',322),
  ('term -> MINUS NUMBER','term',2,'p_term','parser.py',323),
  ('term -> IDENTIFIER LBRAC term_list RBRAC','term',4,'p_term','parser.py',324),
  ('var_term -> VARIABLE','var_term',1,'p_var_term','parser.py',335),
  ('asp_term -> asp_operation','asp_term',1,'p_asp_term','parser.py',341),
  ('asp_term -> asp_operation asp_eqoperator asp_operation','asp_term',3,'p_asp_term','parser.py',342),
  ('asp_operation -> term','asp_operation',1,'p_asp_operation','parser.py',352),
  ('asp_operation -> asp_operation asp_operator term','asp_operation',3,'p_asp_operation','parser.py',353),
  ('asp_eqoperator -> EQQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',363),
  ('asp_eqoperator -> EQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',364),
  ('asp_eqoperator -> NEQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',365),
  ('asp_eqoperator -> LT','asp_eqoperator',1,'p_asp_eqoperator','parser.py',366),
  ('asp_eqoperator -> GT','asp_eqoperator',1,'p_asp_eqoperator','parser.py',367),
  ('asp_eqoperator -> LE','asp_eqoperator',1,'p_asp_eqoperator','parser.py',368),
  ('asp_eqoperator -> GE','asp_eqoperator',1,'p_asp_eqoperator','parser.py',369),
  ('asp_operator -> PLUS','asp_operator',1,'p_asp_operator','parser.py',373),
  ('asp_operator -> MINUS','asp_operator',1,'p_asp_operator','parser.py',374),
  ('asp_operator -> TIMES','asp_operator',1,'p_asp_operator','parser.py',375),
  ('asp_operator -> DIV','asp_operator',1,'p_asp_operator','parser.py',376),
]
