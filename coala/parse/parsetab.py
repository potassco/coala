
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '13E24876A1F9D3D84FBE26946FBA9A15'
    
_lr_action_items = {'RBRAC':([1,2,7,9,21,27,32,37,41,46,58,60,75,85,90,91,114,116,117,131,132,134,135,139,140,172,188,195,196,204,],[-115,-113,-81,-82,-110,-89,-87,-107,-83,-86,-92,-91,-88,-90,135,-79,-108,-109,-114,172,-71,-80,-116,-112,-111,-84,201,-85,-72,-70,]),'DEFAULT':([0,8,25,48,51,56,77,103,150,152,183,],[4,-4,4,-6,-1,-3,-2,4,-8,-5,-7,]),'FLU':([0,8,25,29,48,51,56,77,78,103,150,152,165,183,],[40,-4,40,88,-6,-1,-3,-2,119,40,-8,-5,119,-7,]),'NUMBER':([0,4,8,22,24,25,28,30,38,43,48,51,56,63,64,65,66,67,68,69,70,71,72,73,77,78,80,81,83,84,86,89,92,93,94,95,96,103,104,107,108,110,113,127,142,145,150,152,158,163,165,170,173,183,189,198,200,],[32,32,-4,75,32,32,32,32,32,32,-6,-1,-3,-104,-100,-106,-103,-105,32,32,-101,32,-102,32,-2,32,32,32,32,32,32,75,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-8,-5,32,32,32,32,32,-7,32,32,32,]),'ESCAPE_ASP':([0,8,25,48,51,56,77,103,150,152,183,],[8,-4,8,-6,-1,-3,-2,150,-8,-5,-7,]),'IFCONS':([1,2,7,9,16,20,21,26,27,32,35,37,41,42,46,49,50,58,60,62,74,75,82,85,87,91,97,114,115,116,117,125,130,133,134,135,136,137,138,139,140,153,161,172,195,],[-115,-113,-81,-82,-98,-77,-110,81,-89,-87,-73,-107,-83,-78,-86,-76,-64,-92,-91,-74,-75,-88,127,-90,-48,-79,127,-108,-99,-109,-114,-50,127,127,-80,-116,-96,-97,-95,-112,-111,-65,-49,-84,-85,]),'COLON':([7,9,27,32,41,46,57,58,60,75,85,91,98,99,102,109,134,159,172,176,186,195,201,206,],[-81,-82,-89,-87,-83,-86,-62,-92,-91,-88,-90,-79,-62,145,145,-66,-80,-63,-84,-63,-67,-85,-68,-69,]),'DDOT':([7,9,27,32,41,46,58,60,75,85,91,134,172,176,179,195,],[-81,-82,-89,-87,-83,-86,-92,-91,-88,-90,-79,-80,-84,198,198,-85,]),'IF':([1,2,7,9,16,20,21,26,27,32,35,37,41,42,46,49,50,55,57,58,60,61,62,74,75,85,87,91,109,114,115,116,117,129,134,135,136,137,138,139,140,153,159,172,186,195,201,206,],[-115,-113,-81,-82,-98,-77,-110,84,-89,-87,-73,-107,-83,-78,-86,-76,-64,108,-62,-92,-91,113,-74,-75,-88,-90,113,-79,-66,-108,-99,-109,-114,170,-80,-116,-96,-97,-95,-112,-111,-65,-63,-84,-67,-85,-68,-69,]),'ACT':([0,8,25,48,51,56,77,78,103,150,152,165,183,],[12,-4,12,-6,-1,-3,-2,121,12,-8,-5,121,-7,]),'DIV':([1,2,7,9,20,21,27,32,35,37,41,42,46,58,60,74,75,85,91,114,116,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,-91,-110,-89,-87,-79,95,-83,-92,-86,-92,-91,-80,-88,-90,-79,95,95,-114,-82,-80,-116,-112,-111,-84,-85,]),'TRUE':([0,4,8,10,12,13,15,22,24,25,28,30,38,40,43,44,47,48,51,52,56,63,64,65,66,67,68,69,70,71,72,73,77,78,80,81,83,84,86,88,89,92,93,94,95,96,103,104,107,108,110,113,119,121,127,142,145,150,152,157,158,163,165,170,173,183,189,198,200,205,],[20,20,-4,-33,60,60,60,60,20,20,20,60,20,60,20,60,60,-6,-1,60,-3,-104,-100,-106,-103,-105,60,60,-101,60,-102,60,-2,20,20,20,20,20,60,-34,60,60,60,60,60,60,20,20,20,20,60,20,60,60,20,60,60,-8,-5,60,60,60,20,20,60,-7,60,60,60,60,]),'MINUS':([0,1,2,4,7,8,9,17,20,21,24,25,27,28,30,32,35,37,38,41,42,43,46,48,51,56,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,83,84,85,86,90,91,92,93,94,95,96,103,104,107,108,110,113,114,115,116,117,120,127,134,135,136,137,138,139,140,142,145,150,152,158,163,165,170,172,173,183,189,195,198,200,],[22,-115,-113,22,-81,-4,-82,71,-91,-110,22,22,-89,22,89,-87,-79,-107,22,-83,-92,22,-86,-6,-1,-3,-92,-91,-104,-100,-106,-103,-105,89,89,-101,89,-102,89,-80,-88,-2,22,22,22,22,22,-90,89,71,-79,89,89,89,89,89,22,22,22,22,89,22,-108,71,-109,-114,-82,22,-80,-116,71,71,71,-112,-111,89,89,-8,-5,89,89,22,22,-84,89,-7,89,-85,89,89,]),'DEF':([0,8,25,48,51,56,77,103,150,152,183,],[29,-4,29,-6,-1,-3,-2,29,-8,-5,-7,]),'NEQ':([1,2,7,9,17,20,21,27,32,35,37,41,42,46,58,60,74,75,85,91,114,116,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,72,-91,-110,-89,-87,-79,-107,-83,-92,-86,-92,-91,-80,-88,-90,-79,-108,-109,-114,-82,-80,-116,-112,-111,-84,-85,]),'LE':([1,2,7,9,17,20,21,27,32,35,37,41,42,46,58,60,74,75,85,91,114,116,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,67,-91,-110,-89,-87,-79,-107,-83,-92,-86,-92,-91,-80,-88,-90,-79,-108,-109,-114,-82,-80,-116,-112,-111,-84,-85,]),'POWER':([1,2,7,9,20,21,27,32,35,41,42,46,58,60,74,75,85,91,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,-91,73,-89,-87,-79,-83,-92,-86,-92,-91,-80,-88,-90,-79,-114,-82,-80,-116,73,73,-84,-85,]),'DFLU':([0,8,25,48,51,56,77,103,150,152,183,],[10,-4,10,-6,-1,-3,-2,10,-8,-5,-7,]),'WHERE':([1,2,7,9,16,20,21,26,27,32,35,37,41,42,46,49,50,55,57,58,59,60,61,62,74,75,76,82,85,87,91,97,98,99,100,101,102,105,109,112,114,115,116,117,125,126,128,129,130,133,134,135,136,137,138,139,140,141,143,148,153,155,156,159,161,167,171,172,174,176,177,180,181,186,193,195,201,203,206,],[-115,-113,-81,-82,-98,-77,-110,78,-89,-87,-73,-107,-83,-78,-86,-76,-64,78,-62,-92,78,-91,-48,-74,-75,-88,78,-51,-90,-48,-79,-51,-62,78,78,78,78,78,-66,78,-108,-99,-109,-114,-50,78,78,78,-51,-51,-80,-116,-96,-97,-95,-112,-111,78,78,78,-65,78,78,-63,-49,-52,78,-84,78,-63,78,-94,-93,-67,78,-85,-68,-61,-69,]),'LT':([1,2,7,9,17,20,21,27,32,35,37,41,42,46,58,60,74,75,85,91,114,116,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,66,-91,-110,-89,-87,-79,-107,-83,-92,-86,-92,-91,-80,-88,-90,-79,-108,-109,-114,-82,-80,-116,-112,-111,-84,-85,]),'VISIBLE':([0,8,25,48,51,56,77,103,150,152,183,],[13,-4,13,-6,-1,-3,-2,13,-8,-5,-7,]),'INIT':([0,8,25,48,51,56,77,103,150,152,183,],[24,-4,24,-6,-1,-3,-2,24,-8,-5,-7,]),'COMMA':([1,2,7,9,16,20,21,27,32,35,37,41,42,46,49,50,57,58,60,62,74,75,85,91,98,109,114,115,116,117,120,122,123,124,132,134,135,136,137,138,139,140,159,162,164,172,176,187,190,191,192,195,201,203,],[-115,-113,-81,-82,-98,-77,-110,-89,-87,-73,-107,-83,-78,-86,-76,104,-62,-92,-91,-74,-75,-88,-90,-79,-62,157,-108,-99,-109,-114,-82,165,-55,-59,173,-80,-116,-96,-97,-95,-112,-111,-63,-62,-57,-84,-63,200,-58,-60,-56,-85,205,-61,]),'DOT':([1,2,3,5,6,7,9,11,14,16,18,19,20,21,23,26,27,31,32,33,34,35,36,37,39,41,42,45,46,49,50,53,54,55,57,58,59,60,61,62,74,75,76,79,82,85,87,91,97,98,99,100,101,102,105,106,109,111,112,114,115,116,117,118,120,122,123,124,125,126,128,129,130,133,134,135,136,137,138,139,140,141,143,144,146,147,148,149,151,153,154,155,156,159,160,161,162,164,166,167,168,169,171,172,174,175,176,177,178,180,181,182,184,185,186,190,191,192,193,194,195,197,199,201,202,203,206,],[-115,-113,-19,-13,-14,-81,-82,56,-11,-98,-10,-17,-77,-110,-18,-53,-89,-20,-87,-21,-24,-73,-15,-107,-12,-83,-78,-23,-86,-76,-64,-9,-16,-53,-62,-92,-53,-91,-48,-74,-75,-88,-53,-25,-51,-90,-48,-79,-51,-62,-53,-53,-53,-53,-53,-41,-66,-26,-53,-108,-99,-109,-114,-46,-82,-54,-55,-59,-50,-53,-53,-53,-51,-51,-80,-116,-96,-97,-95,-112,-111,-53,-53,-27,-47,-32,-53,-28,183,-65,-40,-53,-53,-63,-22,-49,-62,-57,-36,-52,-37,-38,-53,-84,-53,-44,-63,-53,-30,-94,-93,-31,-43,-42,-67,-58,-60,-56,-53,-35,-85,-45,-29,-68,-39,-61,-69,]),'PLUS':([1,2,7,9,17,20,21,27,32,35,37,41,42,46,58,60,74,75,85,90,91,114,115,116,117,120,134,135,136,137,138,139,140,172,195,],[-115,-113,-81,-82,68,-91,-110,-89,-87,-79,-107,-83,-92,-86,-92,-91,-80,-88,-90,68,-79,-108,68,-109,-114,-82,-80,-116,68,68,68,-112,-111,-84,-85,]),'IDENTIFIER':([0,4,8,10,12,13,15,22,24,25,28,30,38,40,43,44,47,48,51,52,56,63,64,65,66,67,68,69,70,71,72,73,77,78,80,81,83,84,86,88,89,92,93,94,95,96,103,104,107,108,110,113,119,121,127,142,145,150,152,157,158,163,165,170,173,183,189,198,200,205,],[27,27,-4,-33,27,27,27,27,27,27,27,27,27,27,27,27,27,-6,-1,27,-3,-104,-100,-106,-103,-105,27,27,-101,27,-102,27,-2,27,27,27,27,27,27,-34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-8,-5,27,27,27,27,27,27,-7,27,27,27,27,]),'NONEXE':([0,8,25,48,51,56,77,103,150,152,183,],[28,-4,28,-6,-1,-3,-2,28,-8,-5,-7,]),'$end':([8,25,51,56,77,152,],[-4,0,-1,-3,-2,-5,]),'APOS':([27,172,],[85,195,]),'CAUSES':([1,2,7,9,16,20,21,26,27,32,35,37,41,42,46,49,50,58,60,62,74,75,85,91,114,115,116,117,134,135,136,137,138,139,140,153,172,195,],[-115,-113,-81,-82,-98,-77,-110,83,-89,-87,-73,-107,-83,-78,-86,-76,-64,-92,-91,-74,-75,-88,-90,-79,-108,-99,-109,-114,-80,-116,-96,-97,-95,-112,-111,-65,-84,-85,]),'GT':([1,2,7,9,17,20,21,27,32,35,37,41,42,46,58,60,74,75,85,91,114,116,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,63,-91,-110,-89,-87,-79,-107,-83,-92,-86,-92,-91,-80,-88,-90,-79,-108,-109,-114,-82,-80,-116,-112,-111,-84,-85,]),'EQQ':([1,2,7,9,17,20,21,27,32,35,37,41,42,46,58,60,74,75,85,91,114,116,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,64,-91,-110,-89,-87,-79,-107,-83,-92,-86,-92,-91,-80,-88,-90,-79,-108,-109,-114,-82,-80,-116,-112,-111,-84,-85,]),'TIMES':([1,2,7,9,20,21,27,32,35,37,41,42,46,58,60,74,75,85,91,114,116,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,-91,-110,-89,-87,-79,96,-83,-92,-86,-92,-91,-80,-88,-90,-79,96,96,-114,-82,-80,-116,-112,-111,-84,-85,]),'ROLE_BEGIN':([0,8,25,51,56,77,152,],[48,-4,48,-1,-3,-2,-5,]),'GE':([1,2,7,9,17,20,21,27,32,35,37,41,42,46,58,60,74,75,85,91,114,116,117,120,134,135,139,140,172,195,],[-115,-113,-81,-82,65,-91,-110,-89,-87,-79,-107,-83,-92,-86,-92,-91,-80,-88,-90,-79,-108,-109,-114,-82,-80,-116,-112,-111,-84,-85,]),'VARIABLE':([0,4,8,10,12,13,15,22,24,25,28,30,38,40,43,44,47,48,51,52,56,63,64,65,66,67,68,69,70,71,72,73,77,78,80,81,83,84,86,88,89,92,93,94,95,96,103,104,107,108,110,113,119,121,127,142,145,150,152,157,158,163,165,170,173,183,189,198,200,205,],[46,46,-4,-33,46,46,46,46,46,46,46,46,46,46,46,46,46,-6,-1,46,-3,-104,-100,-106,-103,-105,46,46,-101,46,-102,46,-2,46,46,46,46,46,46,-34,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-8,-5,46,46,46,46,46,46,-7,46,46,46,46,]),'IMPOSSIBLE':([0,8,25,48,51,56,77,103,150,152,183,],[38,-4,38,-6,-1,-3,-2,38,-8,-5,-7,]),'EQ':([1,2,7,9,17,20,21,27,32,35,37,41,42,46,57,58,60,74,75,85,91,98,114,116,117,120,134,135,139,140,162,172,195,],[-115,-113,-81,-82,70,-91,-110,-89,-87,-79,-107,-83,-92,-86,110,-92,-91,-80,-88,-90,-79,142,-108,-109,-114,163,-80,-116,-112,-111,189,-84,-85,]),'GOAL':([0,8,25,48,51,56,77,103,150,152,183,],[43,-4,43,-6,-1,-3,-2,43,-8,-5,-7,]),'FALSE':([0,4,8,10,12,13,15,22,24,25,28,30,38,40,43,44,47,48,51,52,56,63,64,65,66,67,68,69,70,71,72,73,77,78,80,81,83,84,86,88,89,92,93,94,95,96,103,104,107,108,110,113,119,121,127,142,145,150,152,157,158,163,165,170,173,183,189,198,200,205,],[42,42,-4,-33,58,58,58,58,42,42,42,58,42,58,42,58,58,-6,-1,58,-3,-104,-100,-106,-103,-105,58,58,-101,58,-102,58,-2,42,42,42,42,42,58,-34,58,58,58,58,58,58,42,42,42,42,58,42,58,58,42,58,58,-8,-5,58,58,58,42,42,58,-7,58,58,58,58,]),'LBRAC':([0,4,8,24,25,27,28,30,38,43,48,51,56,63,64,65,66,67,68,69,70,71,72,73,77,78,80,81,83,84,92,93,94,95,96,103,104,107,108,110,113,127,142,150,152,165,170,183,],[30,30,-4,30,30,86,30,30,30,30,-6,-1,-3,-104,-100,-106,-103,-105,30,30,-101,30,-102,30,-2,30,30,30,30,30,30,30,30,30,30,30,30,30,30,158,30,30,158,-8,-5,30,30,-7,]),'INT':([0,8,25,48,51,56,77,103,145,150,152,183,],[44,-4,44,-6,-1,-3,-2,44,180,-8,-5,-7,]),'INERTIAL':([0,8,25,48,51,56,77,103,150,152,183,],[52,-4,52,-6,-1,-3,-2,52,-8,-5,-7,]),'AFTER':([1,2,7,9,16,20,21,26,27,32,35,37,41,42,46,49,50,55,58,60,62,74,75,85,91,114,115,116,117,134,135,136,137,138,139,140,153,172,195,],[-115,-113,-81,-82,-98,-77,-110,80,-89,-87,-73,-107,-83,-78,-86,-76,-64,107,-92,-91,-74,-75,-88,-90,-79,-108,-99,-109,-114,-80,-116,-96,-97,-95,-112,-111,-65,-84,-85,]),'MINUSEQ':([9,20,27,35,41,42,46,85,120,172,195,],[-82,-91,-89,93,-83,-92,-86,-90,-82,-84,-85,]),'ROLE_END':([48,103,150,183,],[-6,152,-8,-7,]),'ASSIGN':([9,20,27,35,41,42,46,85,120,172,195,],[-82,-91,-89,94,-83,-92,-86,-90,-82,-84,-85,]),'PLUSEQ':([9,20,27,35,41,42,46,85,120,172,195,],[-82,-91,-89,92,-83,-92,-86,-90,-82,-84,-85,]),'NOT':([0,4,8,24,25,28,38,43,48,51,56,77,78,80,81,83,84,103,104,107,108,113,127,150,152,165,170,183,],[15,15,-4,15,15,15,15,15,-6,-1,-3,-2,15,15,15,15,15,15,15,15,15,15,15,-8,-5,15,15,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term_numeric':([0,4,24,25,28,30,38,43,68,69,71,73,78,80,81,83,84,86,92,93,94,95,96,103,104,107,108,110,113,127,142,145,158,163,165,170,173,189,198,200,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,132,1,1,1,1,1,1,1,1,1,159,1,1,176,179,187,179,1,1,132,159,203,132,]),'asp_brac_operation':([0,4,24,25,28,30,38,43,68,69,71,73,78,80,81,83,84,92,93,94,95,96,103,104,107,108,113,127,165,170,],[2,2,2,2,2,2,2,2,2,2,2,117,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'imposs_law':([0,25,103,],[3,3,3,]),'act_fact':([0,25,103,],[5,5,5,]),'flu_fact':([0,25,103,],[6,6,6,]),'number':([0,4,24,25,28,30,38,43,68,69,71,73,78,80,81,83,84,86,92,93,94,95,96,103,104,107,108,110,113,127,142,145,158,163,165,170,173,189,198,200,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'term_number_list_two':([158,],[188,]),'if_part':([61,87,],[112,133,]),'fluent_formula':([12,13,40,44,47,52,157,205,],[59,61,99,101,102,105,186,206,]),'dynamic_law':([0,25,103,],[54,54,54,]),'asp_eqoperator':([17,],[69,]),'asp_pow_operation':([0,4,24,25,28,30,38,43,68,69,71,78,80,81,83,84,92,93,94,95,96,103,104,107,108,113,127,165,170,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,139,140,21,21,21,21,21,21,21,21,]),'query':([0,25,103,],[14,14,14,]),'binding':([78,165,],[123,192,]),'after_part':([26,],[82,]),'asp_term':([0,4,24,25,28,38,43,78,80,81,83,84,103,104,107,108,113,127,165,170,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'law':([0,25,103,],[18,18,18,]),'inertial_law':([0,25,103,],[19,19,19,]),'default_law':([0,25,103,],[23,23,23,]),'program':([0,],[25,]),'role':([48,],[103,]),'formula':([0,4,24,25,28,38,43,80,81,83,84,103,104,107,108,113,127,170,],[26,55,76,26,87,97,100,125,126,129,130,26,153,155,156,161,167,193,]),'int_domain':([99,102,],[143,148,]),'nonexe_law':([0,25,103,],[31,31,31,]),'visible_law':([0,25,103,],[33,33,33,]),'goal_query':([0,25,103,],[34,34,34,]),'static_law':([0,25,103,],[36,36,36,]),'dotted_numeric_bound':([142,145,163,],[177,181,191,]),'asp_mult_operation':([0,4,24,25,28,30,38,43,68,69,71,78,80,81,83,84,92,93,94,103,104,107,108,113,127,165,170,],[37,37,37,37,37,37,37,37,114,37,116,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'variable':([0,4,12,13,15,22,24,25,28,30,38,40,43,44,47,52,68,69,71,73,78,80,81,83,84,86,89,92,93,94,95,96,103,104,107,108,110,113,119,121,127,142,145,157,158,163,165,170,173,189,198,200,205,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,120,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,120,9,9,9,9,9,9,]),'asp_arith':([0,4,24,25,28,38,43,78,80,81,83,84,103,104,107,108,113,127,165,170,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'bindings':([78,],[122,]),'pred_fact':([0,25,103,],[39,39,39,]),'term_number_list':([86,173,200,],[131,196,204,]),'term':([0,4,12,13,15,22,24,25,28,30,38,40,43,44,47,52,68,69,71,73,78,80,81,83,84,86,89,92,93,94,95,96,103,104,107,108,110,113,119,121,127,142,145,157,158,163,165,170,173,189,198,200,205,],[35,35,57,57,62,74,35,35,35,91,35,98,35,57,57,57,91,91,91,91,35,35,35,35,35,91,134,91,91,91,91,91,35,35,35,35,91,35,162,164,35,91,91,57,91,91,35,35,91,91,91,91,57,]),'identifier':([0,4,12,13,15,22,24,25,28,30,38,40,43,44,47,52,68,69,71,73,78,80,81,83,84,86,89,92,93,94,95,96,103,104,107,108,110,113,119,121,127,142,145,157,158,163,165,170,173,189,198,200,205,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'where_part':([26,55,59,76,99,100,101,102,105,112,126,128,129,141,143,148,155,156,171,174,177,193,],[79,106,111,118,144,146,147,149,154,160,166,168,169,175,178,182,184,185,194,197,199,202,]),'init_rule':([0,25,103,],[45,45,45,]),'asp_operation':([0,4,24,25,28,30,38,43,69,78,80,81,83,84,92,93,94,103,104,107,108,113,127,165,170,],[17,17,17,17,17,90,17,17,115,17,17,17,17,17,136,137,138,17,17,17,17,17,17,17,17,]),'rule':([0,25,103,],[11,11,151,]),'defined_fluent':([0,25,103,],[47,47,47,]),'equalpart':([57,98,162,],[109,109,190,]),'term_boolean':([0,4,24,25,28,38,43,78,80,81,83,84,103,104,107,108,113,127,165,170,],[50,50,50,50,50,50,50,124,50,50,50,50,50,50,50,50,50,50,124,50,]),'program_part':([0,25,],[51,77,]),'fact':([0,25,103,],[53,53,53,]),'ifcons_part':([82,97,130,133,],[128,141,171,174,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_part','program',1,'p_program','parser.py',52),
  ('program -> program program_part','program',2,'p_program','parser.py',53),
  ('program_part -> rule DOT','program_part',2,'p_program_part','parser.py',57),
  ('program_part -> ESCAPE_ASP','program_part',1,'p_program_part','parser.py',58),
  ('program_part -> ROLE_BEGIN role ROLE_END','program_part',3,'p_program_part','parser.py',59),
  ('role -> <empty>','role',0,'p_role','parser.py',84),
  ('role -> role rule DOT','role',3,'p_role','parser.py',85),
  ('role -> role ESCAPE_ASP','role',2,'p_role','parser.py',86),
  ('rule -> fact','rule',1,'p_rule','parser.py',113),
  ('rule -> law','rule',1,'p_rule','parser.py',114),
  ('rule -> query','rule',1,'p_rule','parser.py',115),
  ('fact -> pred_fact','fact',1,'p_fact','parser.py',119),
  ('fact -> act_fact','fact',1,'p_fact','parser.py',120),
  ('fact -> flu_fact','fact',1,'p_fact','parser.py',121),
  ('law -> static_law','law',1,'p_law','parser.py',126),
  ('law -> dynamic_law','law',1,'p_law','parser.py',127),
  ('law -> inertial_law','law',1,'p_law','parser.py',128),
  ('law -> default_law','law',1,'p_law','parser.py',129),
  ('law -> imposs_law','law',1,'p_law','parser.py',130),
  ('law -> nonexe_law','law',1,'p_law','parser.py',131),
  ('law -> visible_law','law',1,'p_law','parser.py',132),
  ('visible_law -> VISIBLE fluent_formula if_part where_part','visible_law',4,'p_visible_law','parser.py',136),
  ('query -> init_rule','query',1,'p_query','parser.py',144),
  ('query -> goal_query','query',1,'p_query','parser.py',145),
  ('pred_fact -> formula where_part','pred_fact',2,'p_pred_fact','parser.py',149),
  ('act_fact -> ACT fluent_formula where_part','act_fact',3,'p_act_fact','parser.py',155),
  ('flu_fact -> FLU fluent_formula where_part','flu_fact',3,'p_flu_fact','parser.py',165),
  ('flu_fact -> defined_fluent fluent_formula where_part','flu_fact',3,'p_flu_fact','parser.py',166),
  ('flu_fact -> FLU term EQ dotted_numeric_bound where_part','flu_fact',5,'p_flu_fact','parser.py',167),
  ('flu_fact -> FLU fluent_formula int_domain where_part','flu_fact',4,'p_flu_fact','parser.py',168),
  ('flu_fact -> defined_fluent fluent_formula int_domain where_part','flu_fact',4,'p_flu_fact','parser.py',169),
  ('flu_fact -> INT fluent_formula where_part','flu_fact',3,'p_flu_fact','parser.py',170),
  ('defined_fluent -> DFLU','defined_fluent',1,'p_defined_fluent','parser.py',241),
  ('defined_fluent -> DEF FLU','defined_fluent',2,'p_defined_fluent','parser.py',242),
  ('static_law -> formula IF formula ifcons_part where_part','static_law',5,'p_static_law','parser.py',246),
  ('static_law -> formula IFCONS formula where_part','static_law',4,'p_static_law','parser.py',247),
  ('dynamic_law -> formula after_part ifcons_part where_part','dynamic_law',4,'p_dynamic_law','parser.py',259),
  ('dynamic_law -> formula CAUSES formula where_part','dynamic_law',4,'p_dynamic_law','parser.py',260),
  ('dynamic_law -> formula CAUSES formula IF formula where_part','dynamic_law',6,'p_dynamic_law','parser.py',261),
  ('inertial_law -> INERTIAL fluent_formula where_part','inertial_law',3,'p_inertial_law','parser.py',280),
  ('default_law -> DEFAULT formula where_part','default_law',3,'p_default_law','parser.py',285),
  ('default_law -> DEFAULT formula IF formula where_part','default_law',5,'p_default_law','parser.py',286),
  ('default_law -> DEFAULT formula AFTER formula where_part','default_law',5,'p_default_law','parser.py',287),
  ('imposs_law -> IMPOSSIBLE formula ifcons_part where_part','imposs_law',4,'p_imposs_law','parser.py',301),
  ('nonexe_law -> NONEXE formula if_part ifcons_part where_part','nonexe_law',5,'p_nonexe_law','parser.py',315),
  ('init_rule -> INIT formula where_part','init_rule',3,'p_init_rule','parser.py',331),
  ('goal_query -> GOAL formula where_part','goal_query',3,'p_goal_query','parser.py',337),
  ('if_part -> <empty>','if_part',0,'p_if_part','parser.py',345),
  ('if_part -> IF formula','if_part',2,'p_if_part','parser.py',346),
  ('after_part -> AFTER formula','after_part',2,'p_after_part','parser.py',354),
  ('ifcons_part -> <empty>','ifcons_part',0,'p_ifcons_part','parser.py',360),
  ('ifcons_part -> IFCONS formula','ifcons_part',2,'p_ifcons_part','parser.py',361),
  ('where_part -> <empty>','where_part',0,'p_where_part','parser.py',369),
  ('where_part -> WHERE bindings','where_part',2,'p_where_part','parser.py',370),
  ('bindings -> binding','bindings',1,'p_bindings','parser.py',375),
  ('bindings -> bindings COMMA binding','bindings',3,'p_bindings','parser.py',376),
  ('binding -> ACT term','binding',2,'p_binding','parser.py',384),
  ('binding -> FLU term equalpart','binding',3,'p_binding','parser.py',385),
  ('binding -> term_boolean','binding',1,'p_binding','parser.py',386),
  ('binding -> variable EQ dotted_numeric_bound','binding',3,'p_binding','parser.py',387),
  ('dotted_numeric_bound -> term_numeric DDOT term_numeric','dotted_numeric_bound',3,'p_dotted_numeric_bound','parser.py',409),
  ('equalpart -> <empty>','equalpart',0,'p_equalpart','parser.py',414),
  ('equalpart -> EQ term_numeric','equalpart',2,'p_equalpart','parser.py',415),
  ('formula -> term_boolean','formula',1,'p_formula','parser.py',424),
  ('formula -> term_boolean COMMA formula','formula',3,'p_formula','parser.py',425),
  ('fluent_formula -> term equalpart','fluent_formula',2,'p_fluent_formula','parser.py',454),
  ('fluent_formula -> term equalpart COMMA fluent_formula','fluent_formula',4,'p_fluent_formula','parser.py',455),
  ('fluent_formula -> term EQ LBRAC term_number_list_two RBRAC','fluent_formula',5,'p_fluent_formula','parser.py',456),
  ('fluent_formula -> term EQ LBRAC term_number_list_two RBRAC COMMA fluent_formula','fluent_formula',7,'p_fluent_formula','parser.py',457),
  ('term_number_list_two -> term_numeric COMMA term_number_list','term_number_list_two',3,'p_term_number_list_two','parser.py',477),
  ('term_number_list -> term_numeric','term_number_list',1,'p_term_number_list','parser.py',482),
  ('term_number_list -> term_numeric COMMA term_number_list','term_number_list',3,'p_term_number_list','parser.py',483),
  ('term_boolean -> term','term_boolean',1,'p_term_boolean','parser.py',491),
  ('term_boolean -> NOT term','term_boolean',2,'p_term_boolean','parser.py',492),
  ('term_boolean -> MINUS term','term_boolean',2,'p_term_boolean','parser.py',493),
  ('term_boolean -> asp_term','term_boolean',1,'p_term_boolean','parser.py',494),
  ('term_boolean -> TRUE','term_boolean',1,'p_term_boolean','parser.py',495),
  ('term_boolean -> FALSE','term_boolean',1,'p_term_boolean','parser.py',496),
  ('term_numeric -> term','term_numeric',1,'p_term_numeric','parser.py',525),
  ('term_numeric -> MINUS term','term_numeric',2,'p_term_numeric','parser.py',526),
  ('term_numeric -> number','term_numeric',1,'p_term_numeric','parser.py',527),
  ('term -> variable','term',1,'p_term','parser.py',534),
  ('term -> identifier','term',1,'p_term','parser.py',535),
  ('term -> IDENTIFIER LBRAC term_number_list RBRAC','term',4,'p_term','parser.py',536),
  ('term -> IDENTIFIER LBRAC term_number_list RBRAC APOS','term',5,'p_term','parser.py',537),
  ('variable -> VARIABLE','variable',1,'p_variable','parser.py',546),
  ('number -> NUMBER','number',1,'p_number','parser.py',550),
  ('number -> MINUS NUMBER','number',2,'p_number','parser.py',551),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','parser.py',557),
  ('identifier -> IDENTIFIER APOS','identifier',2,'p_identifier','parser.py',558),
  ('identifier -> TRUE','identifier',1,'p_identifier','parser.py',559),
  ('identifier -> FALSE','identifier',1,'p_identifier','parser.py',560),
  ('int_domain -> COLON dotted_numeric_bound','int_domain',2,'p_int_domain','parser.py',569),
  ('int_domain -> COLON INT','int_domain',2,'p_int_domain','parser.py',570),
  ('asp_term -> term ASSIGN asp_operation','asp_term',3,'p_asp_term','parser.py',594),
  ('asp_term -> term PLUSEQ asp_operation','asp_term',3,'p_asp_term','parser.py',595),
  ('asp_term -> term MINUSEQ asp_operation','asp_term',3,'p_asp_term','parser.py',596),
  ('asp_term -> asp_arith','asp_term',1,'p_asp_term','parser.py',597),
  ('asp_arith -> asp_operation asp_eqoperator asp_operation','asp_arith',3,'p_asp_arith','parser.py',613),
  ('asp_eqoperator -> EQQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',617),
  ('asp_eqoperator -> EQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',618),
  ('asp_eqoperator -> NEQ','asp_eqoperator',1,'p_asp_eqoperator','parser.py',619),
  ('asp_eqoperator -> LT','asp_eqoperator',1,'p_asp_eqoperator','parser.py',620),
  ('asp_eqoperator -> GT','asp_eqoperator',1,'p_asp_eqoperator','parser.py',621),
  ('asp_eqoperator -> LE','asp_eqoperator',1,'p_asp_eqoperator','parser.py',622),
  ('asp_eqoperator -> GE','asp_eqoperator',1,'p_asp_eqoperator','parser.py',623),
  ('asp_operation -> asp_mult_operation','asp_operation',1,'p_asp_operation','parser.py',627),
  ('asp_operation -> asp_operation PLUS asp_mult_operation','asp_operation',3,'p_asp_operation','parser.py',628),
  ('asp_operation -> asp_operation MINUS asp_mult_operation','asp_operation',3,'p_asp_operation','parser.py',629),
  ('asp_mult_operation -> asp_pow_operation','asp_mult_operation',1,'p_asp_mult_operation','parser.py',636),
  ('asp_mult_operation -> asp_mult_operation TIMES asp_pow_operation','asp_mult_operation',3,'p_asp_mult_operation','parser.py',637),
  ('asp_mult_operation -> asp_mult_operation DIV asp_pow_operation','asp_mult_operation',3,'p_asp_mult_operation','parser.py',638),
  ('asp_pow_operation -> asp_brac_operation','asp_pow_operation',1,'p_asp_pow_operation','parser.py',645),
  ('asp_pow_operation -> asp_pow_operation POWER asp_brac_operation','asp_pow_operation',3,'p_asp_pow_operation','parser.py',646),
  ('asp_brac_operation -> term_numeric','asp_brac_operation',1,'p_asp_brac_operation','parser.py',653),
  ('asp_brac_operation -> LBRAC asp_operation RBRAC','asp_brac_operation',3,'p_asp_brac_operation','parser.py',654),
]
