%%%% Initial State

<asp> 
init(rob1,1,2). init(rob2,2,1).
%initially(val(F,false)) :- fluent(F), not initially(val(F,true)).
agent(rob1,bomberman).agent(rob2,bomberman).
environment_step_delay(1).
</asp>

<fluent> ag(Ag,at(X,Y)) <where> map(X,Y), agent(Ag,_).
<inertial> ag(Ag,at(X,Y)) <where> map(X,Y), agent(Ag,_).% <fluent> ag(Ag,at(X,Y)).
%
<initially> ag(Ag,at(X,Y)) <where> init(Ag,X,Y).
<initially> -ag(Ag,at(X,Y)) <where> not init(Ag,X,Y), agent(Ag,_), map(X,Y).

<fluent> help(Ag,someoneat(X,Y)) <where> agent(Ag,bomberman), map(X,Y).
<default> -help(Ag,someoneat(X,Y)) <where> agent(Ag,bomberman), map(X,Y).
help(Aga,someoneat(X,Y)) <if> ag(Ag,at(X,Y)) <where> agent(Ag,bomberman), agent(Aga,bomberman), Aga != Ag, map(X,Y).

<fluent> boom(X,Y) <where> map(X,Y).
<default> -boom(X,Y) <where> map(X,Y).
boom(X,Y) <after> ag(Ag,bomb(0,X,Y)) <where> map(X,Y), agent(Ag,bomberman).

<fluent> ag(Ag,bomb(V,X,Y)) <where> bombcounter(V), map(X,Y), agent(Ag,bomberman).
ag(Ag,bomb(V,X,Y)) <if> ag(Ag2,bomb(V,X,Y)) <where> bombcounter(V), map(X,Y), agent(Ag,bomberman), agent(Ag2,bomberman), Ag != Ag2.


<fluent> ag(Ag,someoneat(X,Y)) <where> agent(Ag,bomberman), map(X,Y).
%<default> -ag(Ag,someoneat(X,Y)) <where> agent(Ag,bomberman), map(X,Y).
%ag(Aga,someoneat(X,Y)) <if> ag(Ag,at(X,Y)) <where> agent(Ag,bomberman), agent(Aga,bomberman), map(X,Y).
%ag(Aga,someoneat(X,Y)) <if> ag(Ag,at(X,Y)) <where> agent(Ag,bomberman), agent(Aga,bomberman), Aga != Ag, map(X,Y).
ag(Aga,someoneat(X,Y)) <if> help(Aga,someoneat(X,Y)) <where> <fluent> help(Aga,someoneat(X,Y)).
-ag(Aga,someoneat(X,Y)) <if> -help(Aga,someoneat(X,Y)) <where> <fluent> help(Aga,someoneat(X,Y)).


<initially> -ag(Aga,someoneat(X,Y)) <where> agent(Aga,bomberman), map(X,Y), not init(_,X,Y).
<initially> ag(Aga,someoneat(X,Y)) <where> agent(Aga,bomberman), init(_,X,Y).
